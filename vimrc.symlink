set nocompatible              " be iMproved, required
filetype off                  " required
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" Plugins ======================================
Plugin 'gmarik/Vundle.vim'
Plugin 'bogado/file-line'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'airblade/vim-gitgutter'
Plugin 'Shougo/vimproc.vim'
Plugin 'bling/vim-airline'
Plugin 'mattn/gist-vim'
Plugin 'mattn/webapi-vim' "required for gist vim
Plugin 'kchmck/vim-coffee-script'
Plugin 'tpope/vim-rails'
Plugin 'benmills/vimux'
Plugin 'tpope/vim-markdown'
Plugin 'vim-scripts/SQLUtilities'
Plugin 'tpope/vim-fugitive'
Plugin 'slim-template/vim-slim'
Plugin 'kien/ctrlp.vim'
Plugin 'hughbien/md-vim'
Plugin 'ervandew/supertab'
Plugin 'kablamo/vim-git-log'
Plugin 'tpope/vim-surround'
Plugin 'altercation/vim-colors-solarized'
Plugin 'mtth/scratch.vim'
Plugin 'christoomey/vim-tmux-navigator'
Plugin 'dhruvasagar/vim-table-mode'
" END Plugins ==================================
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" END Vundle

colorscheme anotherdark
set wildmenu
set guifont=Inconsolata\ For\ Powerline
set foldmethod=syntax
setlocal foldlevelstart=20
setlocal foldmarker=/*,*/
set guioptions=aAce
set clipboard=unnamed
set number
set ignorecase
set noswapfile
set hlsearch
set nowrap
set hidden

" tab should create 2 spaces
set expandtab
set tabstop=2
set shiftwidth=2

" for ruby syntax, use 2 spaces
autocmd BufRead,BufNewFile *.rb set sw=2 sts=2 et

" Map leader
:let mapleader = ","

" insert a single character
:nmap <C-i> i_<Esc>r

" Give a shortcut to CtrlP
map <C-p> :CtrlP<CR>
map <leader>r :CtrlP<CR>
set wildignore+=*.png,*.jpg,*.pdf,*.swf

" save ctrlP cache
let g:ctrlp_clear_cache_on_exit = 0
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'
let g:ctrlp_custom_ignore = '\.git$\|\.o$\|\.app$\|\.beam$\|\.dSYM\|\.ipa$\|\.csv\|tags\|public\/images$\|public\/uploads$\|log\|tmp$\|source_maps\|app\/assets\/images\|test\/reports\|node_modules\|bower_components'

let g:ctrlp_cmd = 'CtrlPLastMode'
let g:ctrlp_extensions = ['buffertag', 'tag', 'line', 'dir']

" make the shell source .bashrc and .bash_profle
set shell=bash\ --login

" Map an easier excape
inoremap jj <ESC>

" mapping the write command
nnoremap ss :w<CR>

" Give a shortcut key to NERD Tree
map <leader>n :NERDTreeToggle<CR>

" Shortcut for switching window
map <leader>w <C-W>w
map <D-ENTER> :set invfullscreen<CR>

" vertical split
nnoremap <leader>v <C-w>v<C-w>l:enew<CR>
" new tab
nnoremap gT :tabe<CR>

" ctrl-\ open in tag in new tab
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
" alt-] open in tag in vertical split
map <leader>g :vsp <CR>:exec("tag ".expand("<cword>"))<CR>

" clear the last highlighted search
nnoremap <leader>h :noh<return><esc>

" find current word in quickfix
nnoremap <leader>fw :execute "vimgrep ".expand("<cword>")." %"<cr>:copen<cr>

" Increase or Decrease the current transparency value
nnoremap <C-q> :set transparency+=1<CR>
nnoremap <C-a> :set transparency-=1<CR>

" vim-airline always on
set laststatus=2
let g:airline_powerline_fonts = 1
python import sys; sys.path.append("~/Library/Python/2.7/lib/python/site-packages")
"python from powerline.bindings.vim import source_plugin; source_plugin()
source ~/.vim/plugin/powerline.vim

"  syntax automatically selected based on extension
syntax on
filetype on
filetype plugin on
au BufNewFile,BufRead *.note set filetype=note

" Show trailing spaces as a dot
set list listchars=trail:.,tab:>>

" ctags configurations
let g:ctags_statusline=1

" map a command for doing a git pull
:ca gp !git pull

" Open markdown files with Chrome.
nnoremap <F5> :silent !open -a "Google Chrome.app" "%:p"<CR> :redraw!<CR>

" enable the numpad
if &term=="xterm" || &term=="xterm-color" || &term=="xterm-256color"
  fixdel
  set t_Co=256
  set t_Sb=^[4%dm
  set t_Sf=^[3%dm
  :imap <Esc>Oq 1
  :imap <Esc>Or 2
  :imap <Esc>Os 3
  :imap <Esc>Ot 4
  :imap <Esc>Ou 5
  :imap <Esc>Ov 6
  :imap <Esc>Ow 7
  :imap <Esc>Ox 8
  :imap <Esc>Oy 9
  :imap <Esc>Op 0
  :imap <Esc>On .
  :imap <Esc>OQ /
  :imap <Esc>OR *
  :imap <Esc>Ol +
  :imap <Esc>OS -
endif

""""""""""" Functions
nnoremap <leader><Space> :call TrimSpaces()<CR>
function TrimSpaces()
  %s/\s*$//
  %s/\t/  /g
  ''
:endfunction

function IsMinitest(filename)
  let split_filename = split(a:filename, ":")[0]
  return match(split_filename, '_test.rb$') != -1
:endfunction

function IsRspec(filename)
  let split_filename = split(a:filename, ":")[0]
  return match(split_filename, '_spec.rb$') != -1
:endfunction

function IsJasmine(filename)
  let split_filename = split(a:filename, ":")[0]
  return match(split_filename, '_spec.js$') != -1
:endfunction

function IsExUnit(filename)
  let split_filename = split(a:filename, ":")[0]
  return match(split_filename, '_test.exs$') != -1
:endfunction

function RunTests(filename)
    " Write the file and run tests for the given filename
    :w

    if IsMinitest(a:filename)
      let command_to_run = "m " . a:filename
    elseif IsRspec(a:filename)
      let command_to_run = "rspec " . a:filename
    elseif IsJasmine(a:filename)
      let command_to_run = "jasmine-node " . a:filename
    elseif IsExUnit(a:filename)
      let command_to_run = "elixir " . a:filename
    end

    call VimuxRunCommand(command_to_run)
:endfunction

function SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
:endfunction

function RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_spec_file = IsMinitest(expand("%")) || IsRspec(expand("%")) || IsJasmine(expand("%")) || IsExUnit(expand("%"))
    if in_spec_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
:endfunction

function RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
:endfunction

map <leader>t :call RunTestFile()<cr><cr>
map <leader>T :call RunNearestTest()<cr><cr>
map <leader>a :call RunTests('spec')<cr><cr>

" Create a codefolded note block with the current date
map <leader>f :call NoteBlock()<CR>
function NoteBlock()
  let @a= "/* ** ".strftime("%m/%d/%y").":"
  let @b= "*/"
  put b
  .-1 put a
:endfunction
